{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","to","title","aria-label","aria-current","aboutText","placeholder","onClick","colr","document","getElementById","value","toggleMode","role","htmlFor","TextForm","useState","text","setText","heading","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","i","split","join","select","navigator","clipboard","writeText","getSelection","removeAllRanges","filter","elem","Alert","height","alert","word","lower","charAt","slice","cap","msg","defaultProps","App","setMode","setAlert","messege","setTimeout","body","console","log","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.51200160.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function About(props) {\n\n    let myStyle = {\n        color: props.mode === 'dark' ? 'white' : '#042743',\n        backgroundColor: props.mode === 'dark' ? 'rgb(36, 74, 104)' : 'white',\n    }\n\n    return (\n        <div className = \"container\">\n            <h1 className = \"my-3\" style = {{color: props.mode === 'dark' ? 'white' : '#042743'}}>About Us</h1>\n            <div className=\"accordion\" id=\"accordionExample\">\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\n                    <button className=\"accordion-button\" style = {myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                        <strong>Analyze Your Text</strong>\n                    </button>\n                    </h2>\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style = {myStyle}>\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\n                    <button className=\"accordion-button collapsed\" style = {myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                        <strong>Free To Use</strong>\n                    </button>\n                    </h2>\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style = {myStyle}>\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\n                    <button className=\"accordion-button collapsed\" style = {myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                        <strong>Browser Compatible</strong>\n                    </button>\n                    </h2>\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style = {myStyle}>\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n    const changeColor = () => {\n        props.colr(document.getElementById(\"clr\").value);\n    }\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode === \"primary\" ? \"dark\" : props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                {/* title */}\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n                {/* <a className=\"navbar-brand\" href=\"#\">{props.title}</a> */}\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        {/* Home */}\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n                            {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\n                        </li>\n                        {/* About */}\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                            {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\n                        </li>\n                    </ul>\n\n                    {/* Search Box */}\n                    <div className=\"d-flex mx-3\">\n                    <input className=\"form-control me-2\" type=\"search\" id = \"clr\" placeholder=\"light / dark / primary\" aria-label=\"Search\" />\n                    <button className= {`btn btn-outline-${props.mode === \"primary\" ? \"dark\" : \"primary\"}`} onClick = {changeColor} >Magic</button>\n                    </div>\n\n                    {/* Dark Mode Switch */}\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n                        <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {title: PropTypes.string.isRequired,\n                    aboutText: PropTypes.string.isRequired\n                }\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'Set about here'\n}","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n    const handleUpClick = () => {\n        // console.log(\"Uppercase was clicked\");\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to Upper Case\", \"success\");\n    }\n    const handleLowClick = () => {\n        // console.log(\"Uppercase was clicked\");\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Converted to Lower Case\", \"success\");\n    }\n    const handleCapFirst = () => {\n        // console.log(\"Uppercase was clicked\");\n        let newText = \"\";\n        for(let i = 0; i < text.length; i ++) {\n            let cur = \"\";\n            if(i === 0) {\n                cur = text[i].toUpperCase();\n            } else {\n                if(text[i - 1] === ' ') {\n                    cur = text[i].toUpperCase();\n                } else {\n                    cur = text[i];\n                }\n            }\n            newText = newText + cur;\n        }\n        setText(newText);\n        props.showAlert(\"First Letter is Capitalized\", \"success\");\n    }\n    const handleOnChange = (event) => {\n        // console.log(\"On Change\");\n        setText(event.target.value);\n    }\n    const handleCopy = () => {\n        var text = document.getElementById(\"myBox\");\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        document.getSelection().removeAllRanges();\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\n    }\n    const handleClearClick = () => {\n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text Cleared!\", \"success\");\n    }\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra spaces removed!\", \"success\");\n    }\n    const [text, setText] = useState('');\n    return (\n        <>\n        <div className = \"container\" style = {{color: props.mode === 'light' ? '#042743' : 'white'}}>\n            <h1 className = 'mb-4'>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" value = {text} onChange = {handleOnChange} style = {{backgroundColor: props.mode === 'light' ? 'white' : '#13466e', color: props.mode === 'light' ? '#042743' : 'white'}} rows=\"8\" id = \"myBox\"></textarea>\n            </div>\n            <button disabled = {text.length === 0} className = \"btn btn-primary mx-1 my-1\" onClick = {handleUpClick}>Convert to Uppercase</button>\n            <button disabled = {text.length === 0} className = \"btn btn-primary mx-1 my-1\" onClick = {handleLowClick}>Convert to Lowercase</button>\n            <button disabled = {text.length === 0} className = \"btn btn-primary mx-1 my-1\" onClick = {handleCapFirst}>Capitalize First</button>\n            <button disabled = {text.length === 0} className = \"btn btn-primary mx-1 my-1\" onClick = {handleExtraSpaces}>Remove Extra Spaces</button>\n            <button disabled = {text.length === 0} className = \"btn btn-primary mx-1 my-1\" onClick = {handleCopy}>Copy Text</button>\n            <button disabled = {text.length === 0} className = \"btn btn-primary mx-1 my-1\" onClick = {handleClearClick}>Clear Text</button>\n        </div>\n        <div className = \"container my-3\" style = {{color: props.mode === 'light' ? '#042743' : 'white'}}>\n            <h2>Your Text Summary !!</h2>\n            <p>{text.split(\" \").filter((elem) => {return elem.length !== 0}).length} words and {text.length} characters</p>\n            <p>{0.008 * text.split(\" \").filter((elem) => {return elem.length !== 0}).length} Minutes read</p>\n            <h2>Preview</h2>\n            <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n    const cap = (word) => {\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style = {{height: '70px'}}>\n            {props.alert && \n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n                <strong>{cap(props.alert.type)}: </strong> {props.alert.msg}\n            </div>}\n        </div>\n    )\n}\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (messege, type) => {\n    setAlert({\n      msg: messege,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = 'TextUtils - Dark Mode';\n      // Title chamkane wala kaam\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now !!';\n      // }, 1500);\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  const colr = (color) => {\n    console.log(color);\n    setMode(color);\n    document.title = 'TextUtils -'+ color +' Mode';\n    if(color === 'light') {\n      document.body.style.backgroundColor = 'white';\n    } else {\n      document.body.style.backgroundColor = '#042743';\n    }\n  }\n\n  return (\n    <>\n    <Router>\n      <Navbar title = \"TextUtils\" aboutText =\"About Us\" mode = {mode} toggleMode = {toggleMode} colr = {colr}/>\n      <Alert alert = {alert} />\n      <div className = \"container my-3\">\n        <Switch>\n          {/* exact use na kro to partial matching hogi like :\n          /users --> component 1\n          /users/home --> component 2\n          agar mein exact na use kru toh 2nd path bhi path 1 ko refer krega */}\n          <Route exact path=\"/about\">\n            <About mode = {mode}/>\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert = {showAlert} heading = \"Try TextUtils - Word Counter, Character Counter, Remove Extra Spaces\" mode = {mode} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}